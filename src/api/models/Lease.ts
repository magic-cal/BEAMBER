/* tslint:disable */
/* eslint-disable */
/**
 * amber
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumLeaseType,
    EnumLeaseTypeFromJSON,
    EnumLeaseTypeFromJSONTyped,
    EnumLeaseTypeToJSON,
    Guid,
    GuidFromJSON,
    GuidFromJSONTyped,
    GuidToJSON,
} from './';

/**
 * 
 * @export
 * @interface Lease
 */
export interface Lease {
    /**
     * 
     * @type {number}
     * @memberof Lease
     */
    versionNo: number;
    /**
     * 
     * @type {Guid}
     * @memberof Lease
     */
    id: Guid;
    /**
     * 
     * @type {string}
     * @memberof Lease
     */
    name: string;
    /**
     * 
     * @type {Guid}
     * @memberof Lease
     */
    resourceId: Guid;
    /**
     * 
     * @type {Date}
     * @memberof Lease
     */
    endTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof Lease
     */
    startTime: Date;
    /**
     * 
     * @type {EnumLeaseType}
     * @memberof Lease
     */
    leaseType: EnumLeaseType;
    /**
     * 
     * @type {Guid}
     * @memberof Lease
     */
    maintenanceId?: Guid;
    /**
     * 
     * @type {Guid}
     * @memberof Lease
     */
    assemblyStepId?: Guid;
    /**
     * 
     * @type {Guid}
     * @memberof Lease
     */
    packagingId?: Guid;
    /**
     * 
     * @type {Guid}
     * @memberof Lease
     */
    productId?: Guid;
}

export function LeaseFromJSON(json: any): Lease {
    return LeaseFromJSONTyped(json, false);
}

export function LeaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Lease {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'versionNo': json['versionNo'],
        'id': GuidFromJSON(json['id']),
        'name': json['name'],
        'resourceId': GuidFromJSON(json['resourceId']),
        'endTime': (new Date(json['endTime'])),
        'startTime': (new Date(json['startTime'])),
        'leaseType': EnumLeaseTypeFromJSON(json['leaseType']),
        'maintenanceId': !exists(json, 'maintenanceId') ? undefined : GuidFromJSON(json['maintenanceId']),
        'assemblyStepId': !exists(json, 'assemblyStepId') ? undefined : GuidFromJSON(json['assemblyStepId']),
        'packagingId': !exists(json, 'packagingId') ? undefined : GuidFromJSON(json['packagingId']),
        'productId': !exists(json, 'productId') ? undefined : GuidFromJSON(json['productId']),
    };
}

export function LeaseToJSON(value?: Lease | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'versionNo': value.versionNo,
        'id': GuidToJSON(value.id),
        'name': value.name,
        'resourceId': GuidToJSON(value.resourceId),
        'endTime': (value.endTime.toISOString()),
        'startTime': (value.startTime.toISOString()),
        'leaseType': EnumLeaseTypeToJSON(value.leaseType),
        'maintenanceId': GuidToJSON(value.maintenanceId),
        'assemblyStepId': GuidToJSON(value.assemblyStepId),
        'packagingId': GuidToJSON(value.packagingId),
        'productId': GuidToJSON(value.productId),
    };
}


