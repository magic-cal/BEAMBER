/* tslint:disable */
/* eslint-disable */
/**
 * amber
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Guid,
    GuidFromJSON,
    GuidToJSON,
    MaintenanceLog,
    MaintenanceLogFromJSON,
    MaintenanceLogToJSON,
    MaintenanceLogFilter,
    MaintenanceLogFilterFromJSON,
    MaintenanceLogFilterToJSON,
    QueryResultAny,
    QueryResultAnyFromJSON,
    QueryResultAnyToJSON,
} from '../models';

export interface DeleteMaintenanceLogRequest {
    maintenanceLogId: Guid;
}

export interface GetMaintenanceLogRequest {
    maintenanceLogId: Guid;
}

export interface GetMaintenanceLogsByFilterRequest {
    filter?: MaintenanceLogFilter;
}

export interface UpdateOrCreateMaintenanceLogRequest {
    maintenanceLog: MaintenanceLog;
}

/**
 * 
 */
export class MaintenanceLogApi extends runtime.BaseAPI {

    /**
     */
    async deleteMaintenanceLogRaw(requestParameters: DeleteMaintenanceLogRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.maintenanceLogId === null || requestParameters.maintenanceLogId === undefined) {
            throw new runtime.RequiredError('maintenanceLogId','Required parameter requestParameters.maintenanceLogId was null or undefined when calling deleteMaintenanceLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/MaintenanceLog/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GuidToJSON(requestParameters.maintenanceLogId),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteMaintenanceLog(requestParameters: DeleteMaintenanceLogRequest): Promise<boolean> {
        const response = await this.deleteMaintenanceLogRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMaintenanceLogRaw(requestParameters: GetMaintenanceLogRequest): Promise<runtime.ApiResponse<MaintenanceLog>> {
        if (requestParameters.maintenanceLogId === null || requestParameters.maintenanceLogId === undefined) {
            throw new runtime.RequiredError('maintenanceLogId','Required parameter requestParameters.maintenanceLogId was null or undefined when calling getMaintenanceLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/MaintenanceLog/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuidToJSON(requestParameters.maintenanceLogId),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceLogFromJSON(jsonValue));
    }

    /**
     */
    async getMaintenanceLog(requestParameters: GetMaintenanceLogRequest): Promise<MaintenanceLog> {
        const response = await this.getMaintenanceLogRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMaintenanceLogsByFilterRaw(requestParameters: GetMaintenanceLogsByFilterRequest): Promise<runtime.ApiResponse<Array<MaintenanceLog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/MaintenanceLog/get-by`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MaintenanceLogFilterToJSON(requestParameters.filter),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MaintenanceLogFromJSON));
    }

    /**
     */
    async getMaintenanceLogsByFilter(requestParameters: GetMaintenanceLogsByFilterRequest): Promise<Array<MaintenanceLog>> {
        const response = await this.getMaintenanceLogsByFilterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateOrCreateMaintenanceLogRaw(requestParameters: UpdateOrCreateMaintenanceLogRequest): Promise<runtime.ApiResponse<QueryResultAny>> {
        if (requestParameters.maintenanceLog === null || requestParameters.maintenanceLog === undefined) {
            throw new runtime.RequiredError('maintenanceLog','Required parameter requestParameters.maintenanceLog was null or undefined when calling updateOrCreateMaintenanceLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/MaintenanceLog/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MaintenanceLogToJSON(requestParameters.maintenanceLog),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryResultAnyFromJSON(jsonValue));
    }

    /**
     */
    async updateOrCreateMaintenanceLog(requestParameters: UpdateOrCreateMaintenanceLogRequest): Promise<QueryResultAny> {
        const response = await this.updateOrCreateMaintenanceLogRaw(requestParameters);
        return await response.value();
    }

}
