/* tslint:disable */
/* eslint-disable */
/**
 * amber
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssemblyStep,
    AssemblyStepFromJSON,
    AssemblyStepToJSON,
    AssemblyStepFilter,
    AssemblyStepFilterFromJSON,
    AssemblyStepFilterToJSON,
    Guid,
    GuidFromJSON,
    GuidToJSON,
    QueryResultAny,
    QueryResultAnyFromJSON,
    QueryResultAnyToJSON,
} from '../models';

export interface DeleteAssemblyStepRequest {
    assemblyStepId: Guid;
}

export interface GetAssemblyStepRequest {
    assemblyStepId: Guid;
}

export interface GetAssemblyStepsByFilterRequest {
    filter?: AssemblyStepFilter;
}

export interface UpdateOrCreateAssemblyStepRequest {
    assemblyStep: AssemblyStep;
}

/**
 * 
 */
export class AssemblyStepApi extends runtime.BaseAPI {

    /**
     */
    async deleteAssemblyStepRaw(requestParameters: DeleteAssemblyStepRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.assemblyStepId === null || requestParameters.assemblyStepId === undefined) {
            throw new runtime.RequiredError('assemblyStepId','Required parameter requestParameters.assemblyStepId was null or undefined when calling deleteAssemblyStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AssemblyStep/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GuidToJSON(requestParameters.assemblyStepId),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteAssemblyStep(requestParameters: DeleteAssemblyStepRequest): Promise<boolean> {
        const response = await this.deleteAssemblyStepRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAssemblyStepRaw(requestParameters: GetAssemblyStepRequest): Promise<runtime.ApiResponse<AssemblyStep>> {
        if (requestParameters.assemblyStepId === null || requestParameters.assemblyStepId === undefined) {
            throw new runtime.RequiredError('assemblyStepId','Required parameter requestParameters.assemblyStepId was null or undefined when calling getAssemblyStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AssemblyStep/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuidToJSON(requestParameters.assemblyStepId),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssemblyStepFromJSON(jsonValue));
    }

    /**
     */
    async getAssemblyStep(requestParameters: GetAssemblyStepRequest): Promise<AssemblyStep> {
        const response = await this.getAssemblyStepRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAssemblyStepsByFilterRaw(requestParameters: GetAssemblyStepsByFilterRequest): Promise<runtime.ApiResponse<Array<AssemblyStep>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AssemblyStep/get-by`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssemblyStepFilterToJSON(requestParameters.filter),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssemblyStepFromJSON));
    }

    /**
     */
    async getAssemblyStepsByFilter(requestParameters: GetAssemblyStepsByFilterRequest): Promise<Array<AssemblyStep>> {
        const response = await this.getAssemblyStepsByFilterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateOrCreateAssemblyStepRaw(requestParameters: UpdateOrCreateAssemblyStepRequest): Promise<runtime.ApiResponse<QueryResultAny>> {
        if (requestParameters.assemblyStep === null || requestParameters.assemblyStep === undefined) {
            throw new runtime.RequiredError('assemblyStep','Required parameter requestParameters.assemblyStep was null or undefined when calling updateOrCreateAssemblyStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AssemblyStep/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssemblyStepToJSON(requestParameters.assemblyStep),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryResultAnyFromJSON(jsonValue));
    }

    /**
     */
    async updateOrCreateAssemblyStep(requestParameters: UpdateOrCreateAssemblyStepRequest): Promise<QueryResultAny> {
        const response = await this.updateOrCreateAssemblyStepRaw(requestParameters);
        return await response.value();
    }

}
