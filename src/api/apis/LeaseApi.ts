/* tslint:disable */
/* eslint-disable */
/**
 * amber
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import {
  Guid,
  GuidFromJSON,
  GuidToJSON,
  Lease,
  LeaseFromJSON,
  LeaseToJSON,
  LeaseFilter,
  LeaseFilterFromJSON,
  LeaseFilterToJSON,
  QueryResultAny,
  QueryResultAnyFromJSON,
  QueryResultAnyToJSON
} from "../models"

export interface DeleteLeaseRequest {
  leaseId: Guid
}

export interface GetLeaseRequest {
  leaseId: Guid
}

export interface GetLeasesByFilterRequest {
  filter?: LeaseFilter
}

export interface UpdateOrCreateLeaseRequest {
  lease: Lease
}

/**
 *
 */
export class LeaseApi extends runtime.BaseAPI {
  /**
   */
  async deleteLeaseRaw(requestParameters: DeleteLeaseRequest): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.leaseId === null || requestParameters.leaseId === undefined) {
      throw new runtime.RequiredError(
        "leaseId",
        "Required parameter requestParameters.leaseId was null or undefined when calling deleteLease."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request({
      path: `/Lease/delete`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
      body: GuidToJSON(requestParameters.leaseId)
    })

    return new runtime.TextApiResponse(response) as any
  }

  /**
   */
  async deleteLease(requestParameters: DeleteLeaseRequest): Promise<boolean> {
    const response = await this.deleteLeaseRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async getLeaseRaw(requestParameters: GetLeaseRequest): Promise<runtime.ApiResponse<Lease>> {
    if (requestParameters.leaseId === null || requestParameters.leaseId === undefined) {
      throw new runtime.RequiredError(
        "leaseId",
        "Required parameter requestParameters.leaseId was null or undefined when calling getLease."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request({
      path: `/Lease/get`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: GuidToJSON(requestParameters.leaseId)
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => LeaseFromJSON(jsonValue))
  }

  /**
   */
  async getLease(requestParameters: GetLeaseRequest): Promise<Lease> {
    const response = await this.getLeaseRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async getLeasesByFilterRaw(requestParameters: GetLeasesByFilterRequest): Promise<runtime.ApiResponse<Array<Lease>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request({
      path: `/Lease/get-by`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: LeaseFilterToJSON(requestParameters.filter)
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LeaseFromJSON))
  }

  /**
   */
  async getLeasesByFilter(requestParameters: GetLeasesByFilterRequest): Promise<Array<Lease>> {
    const response = await this.getLeasesByFilterRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async updateOrCreateLeaseRaw(
    requestParameters: UpdateOrCreateLeaseRequest
  ): Promise<runtime.ApiResponse<QueryResultAny>> {
    if (requestParameters.lease === null || requestParameters.lease === undefined) {
      throw new runtime.RequiredError(
        "lease",
        "Required parameter requestParameters.lease was null or undefined when calling updateOrCreateLease."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request({
      path: `/Lease/update`,
      method: "PUT",
      headers: headerParameters,
      query: queryParameters,
      body: LeaseToJSON(requestParameters.lease)
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => QueryResultAnyFromJSON(jsonValue))
  }

  /**
   */
  async updateOrCreateLease(requestParameters: UpdateOrCreateLeaseRequest): Promise<QueryResultAny> {
    const response = await this.updateOrCreateLeaseRaw(requestParameters)
    return await response.value()
  }
}
