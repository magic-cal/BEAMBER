/* tslint:disable */
/* eslint-disable */
/**
 * amber
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Guid,
    GuidFromJSON,
    GuidToJSON,
    QueryResultAny,
    QueryResultAnyFromJSON,
    QueryResultAnyToJSON,
    RecipeStep,
    RecipeStepFromJSON,
    RecipeStepToJSON,
    RecipeStepFilter,
    RecipeStepFilterFromJSON,
    RecipeStepFilterToJSON,
} from '../models';

export interface DeleteRecipeStepRequest {
    recipeStepId: Guid;
}

export interface GetRecipeStepRequest {
    recipeStepId: Guid;
}

export interface GetRecipeStepsByFilterRequest {
    filter?: RecipeStepFilter;
}

export interface UpdateOrCreateRecipeStepRequest {
    recipeStep: RecipeStep;
}

/**
 * 
 */
export class RecipeStepApi extends runtime.BaseAPI {

    /**
     */
    async deleteRecipeStepRaw(requestParameters: DeleteRecipeStepRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.recipeStepId === null || requestParameters.recipeStepId === undefined) {
            throw new runtime.RequiredError('recipeStepId','Required parameter requestParameters.recipeStepId was null or undefined when calling deleteRecipeStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RecipeStep/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GuidToJSON(requestParameters.recipeStepId),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteRecipeStep(requestParameters: DeleteRecipeStepRequest): Promise<boolean> {
        const response = await this.deleteRecipeStepRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getRecipeStepRaw(requestParameters: GetRecipeStepRequest): Promise<runtime.ApiResponse<RecipeStep>> {
        if (requestParameters.recipeStepId === null || requestParameters.recipeStepId === undefined) {
            throw new runtime.RequiredError('recipeStepId','Required parameter requestParameters.recipeStepId was null or undefined when calling getRecipeStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RecipeStep/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuidToJSON(requestParameters.recipeStepId),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecipeStepFromJSON(jsonValue));
    }

    /**
     */
    async getRecipeStep(requestParameters: GetRecipeStepRequest): Promise<RecipeStep> {
        const response = await this.getRecipeStepRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getRecipeStepsByFilterRaw(requestParameters: GetRecipeStepsByFilterRequest): Promise<runtime.ApiResponse<Array<RecipeStep>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RecipeStep/get-by`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeStepFilterToJSON(requestParameters.filter),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecipeStepFromJSON));
    }

    /**
     */
    async getRecipeStepsByFilter(requestParameters: GetRecipeStepsByFilterRequest): Promise<Array<RecipeStep>> {
        const response = await this.getRecipeStepsByFilterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateOrCreateRecipeStepRaw(requestParameters: UpdateOrCreateRecipeStepRequest): Promise<runtime.ApiResponse<QueryResultAny>> {
        if (requestParameters.recipeStep === null || requestParameters.recipeStep === undefined) {
            throw new runtime.RequiredError('recipeStep','Required parameter requestParameters.recipeStep was null or undefined when calling updateOrCreateRecipeStep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RecipeStep/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecipeStepToJSON(requestParameters.recipeStep),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryResultAnyFromJSON(jsonValue));
    }

    /**
     */
    async updateOrCreateRecipeStep(requestParameters: UpdateOrCreateRecipeStepRequest): Promise<QueryResultAny> {
        const response = await this.updateOrCreateRecipeStepRaw(requestParameters);
        return await response.value();
    }

}
